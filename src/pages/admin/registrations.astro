---
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../db/supabase";

// Check authentication
const {
  data: { session },
  error: authError,
} = await supabase.auth.getSession();
if (authError || !session) {
  return new Response(null, {
    status: 302,
    headers: {
      Location: "/admin/login",
    },
  });
}

// Fetch registrations
const { data: registrations, error } = await supabase
  .from("registrations")
  .select("*")
  .order("created_at", { ascending: false });

if (error) {
  console.error("Error fetching registrations:", error);
}
---

<Layout title="Admin - Registrations">
  <main class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-4xl font-bold">Registrations</h1>
      <div class="flex gap-4">
        <button id="export-csv" class="btn btn-primary">Export CSV</button>
        <button id="refresh" class="btn btn-ghost">Refresh</button>
        <button id="logout" class="btn btn-ghost">Logout</button>
      </div>
    </div>

    <div class="card bg-base-200">
      <div class="card-body">
        <div class="overflow-x-auto">
          <table class="table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>FIDE ID</th>
                <th>Birthday</th>
                <th>Status</th>
                <th>Receipt</th>
                <th>Registered</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {
                registrations?.map((registration) => (
                  <tr>
                    <td>
                      {registration.first_name} {registration.last_name}
                    </td>
                    <td>{registration.email}</td>
                    <td>{registration.phone}</td>
                    <td>{registration.fide_id || "-"}</td>
                    <td>{registration.birthday || "-"}</td>
                    <td>
                      <select
                        class="select select-bordered select-sm"
                        data-id={registration.id}
                        data-status={registration.status}
                      >
                        <option
                          value="pending"
                          selected={registration.status === "pending"}
                        >
                          Pending
                        </option>
                        <option
                          value="confirmed"
                          selected={registration.status === "confirmed"}
                        >
                          Confirmed
                        </option>
                        <option
                          value="waitlisted"
                          selected={registration.status === "waitlisted"}
                        >
                          Waitlisted
                        </option>
                      </select>
                    </td>
                    <td>
                      {registration.payment_receipt_url ? (
                        <a
                          href={
                            supabase.storage
                              .from("receipts")
                              .getPublicUrl(registration.payment_receipt_url)
                              .data.publicUrl
                          }
                          target="_blank"
                          class="btn btn-sm btn-ghost"
                        >
                          View
                        </a>
                      ) : (
                        "-"
                      )}
                    </td>
                    <td>
                      {new Date(registration.created_at).toLocaleDateString()}
                    </td>
                    <td>
                      <button
                        class="btn btn-sm btn-error"
                        data-id={registration.id}
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))
              }
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  import { supabase } from "../../db/supabase";

  // Handle logout
  document.getElementById("logout")?.addEventListener("click", async () => {
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      window.location.href = "/admin/login";
    } catch (error) {
      console.error("Error signing out:", error);
      const notification = document.createElement("div");
      notification.className = "toast toast-top toast-end";
      notification.innerHTML = `
        <div class="alert alert-error">
          <span>Error signing out</span>
        </div>
      `;
      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 3000);
    }
  });

  // Handle status updates
  document.querySelectorAll("select[data-status]").forEach((select) => {
    select.addEventListener("change", async (e) => {
      const target = e.target as HTMLSelectElement;
      const id = target.dataset.id;
      const newStatus = target.value;

      try {
        const { error } = await supabase
          .from("registrations")
          .update({ status: newStatus })
          .eq("id", id);

        if (error) throw error;

        // Show success notification
        const notification = document.createElement("div");
        notification.className = "toast toast-top toast-end";
        notification.innerHTML = `
          <div class="alert alert-success">
            <span>Status updated successfully</span>
          </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
      } catch (error) {
        console.error("Error updating status:", error);
        // Show error notification
        const notification = document.createElement("div");
        notification.className = "toast toast-top toast-end";
        notification.innerHTML = `
          <div class="alert alert-error">
            <span>Error updating status</span>
          </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
      }
    });
  });

  // Handle deletions
  document.querySelectorAll("button[data-id]").forEach((button) => {
    button.addEventListener("click", async (e) => {
      const target = e.target as HTMLButtonElement;
      const id = target.dataset.id;

      if (!confirm("Are you sure you want to delete this registration?")) {
        return;
      }

      try {
        const { error } = await supabase
          .from("registrations")
          .delete()
          .eq("id", id);

        if (error) throw error;

        // Remove the row from the table
        target.closest("tr")?.remove();

        // Show success notification
        const notification = document.createElement("div");
        notification.className = "toast toast-top toast-end";
        notification.innerHTML = `
          <div class="alert alert-success">
            <span>Registration deleted successfully</span>
          </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
      } catch (error) {
        console.error("Error deleting registration:", error);
        // Show error notification
        const notification = document.createElement("div");
        notification.className = "toast toast-top toast-end";
        notification.innerHTML = `
          <div class="alert alert-error">
            <span>Error deleting registration</span>
          </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
      }
    });
  });

  // Handle CSV export
  document.getElementById("export-csv")?.addEventListener("click", () => {
    const registrations = Array.from(document.querySelectorAll("tbody tr")).map(
      (row) => {
        const cells = row.querySelectorAll("td");
        return {
          name: cells[0].textContent,
          email: cells[1].textContent,
          phone: cells[2].textContent,
          fideId: cells[3].textContent,
          birthday: cells[4].textContent,
          status: (cells[5].querySelector("select") as HTMLSelectElement).value,
          registered: cells[7].textContent,
        };
      }
    );

    const csv = [
      ["Name", "Email", "Phone", "FIDE ID", "Birthday", "Status", "Registered"],
      ...registrations.map((r) => [
        r.name,
        r.email,
        r.phone,
        r.fideId,
        r.birthday,
        r.status,
        r.registered,
      ]),
    ]
      .map((row) => row.join(","))
      .join("\n");

    const blob = new Blob([csv], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `registrations-${new Date().toISOString().split("T")[0]}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  });

  // Handle refresh
  document.getElementById("refresh")?.addEventListener("click", () => {
    window.location.reload();
  });
</script>
