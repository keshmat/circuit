---
export const prerender = false;
import AdminLayout from "../../layouts/AdminLayout.astro";
import { supabase } from "../../db/supabase";

// Fetch current settings
const { data: settings, error } = await supabase
  .from("registration_settings")
  .select("*")
  .single();

if (error) {
  console.error("Error fetching settings:", error);
}
---

<AdminLayout title="Registration Settings">
  <div class="max-w-2xl mx-auto p-4">
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body p-6">
        <h2 class="card-title text-2xl font-bold mb-4">
          Registration Settings
        </h2>

        <form class="space-y-4" id="settingsForm">
          <input type="hidden" name="settingsId" value={settings?.id} />

          <div class="space-y-4">
            <div class="form-control w-full">
              <label class="label cursor-pointer">
                <span class="label-text text-base">Registration Open</span>
                <input
                  type="checkbox"
                  id="isRegistrationOpen"
                  name="isRegistrationOpen"
                  class="toggle toggle-primary"
                  checked={settings?.is_registration_open}
                />
              </label>
            </div>

            <div class="form-control w-full">
              <label class="label" for="maxRegistrations">
                <span class="label-text text-base">Maximum Registrations</span>
              </label>
              <input
                type="number"
                id="maxRegistrations"
                name="maxRegistrations"
                class="input input-bordered w-full max-w-xs"
                value={settings?.max_registrations}
                min="1"
              />
            </div>

            <div class="form-control w-full">
              <label class="label" for="registrationDeadline">
                <span class="label-text text-base">Registration Deadline</span>
              </label>
              <input
                type="datetime-local"
                id="registrationDeadline"
                name="registrationDeadline"
                class="input input-bordered w-full max-w-xs"
                value={settings?.registration_deadline
                  ? new Date(settings.registration_deadline)
                      .toLocaleString("sv", { timeZone: "UTC" })
                      .replace(" ", "T")
                  : ""}
              />
            </div>

            <div class="form-control w-full">
              <label class="label" for="registrationMessage">
                <span class="label-text text-base"
                  >Registration Page Message</span
                >
              </label>
              <textarea
                id="registrationMessage"
                name="registrationMessage"
                class="textarea textarea-bordered w-full"
                placeholder="Enter a message to display at the top of the registration page..."
                >{settings?.registration_message || ""}</textarea
              >
            </div>
          </div>

          <div class="card-actions justify-end mt-6">
            <button type="submit" class="btn btn-primary">
              Save Settings
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    const form = document.getElementById("settingsForm");
    if (!form) throw new Error("Form not found");

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const settingsId = (
        document.querySelector('input[name="settingsId"]') as HTMLInputElement
      ).value;
      const isRegistrationOpen = document.getElementById(
        "isRegistrationOpen"
      ) as HTMLInputElement;
      const maxRegistrations = document.getElementById(
        "maxRegistrations"
      ) as HTMLInputElement;
      const registrationDeadline = document.getElementById(
        "registrationDeadline"
      ) as HTMLInputElement;
      const registrationMessage = document.getElementById(
        "registrationMessage"
      ) as HTMLTextAreaElement;

      if (
        !isRegistrationOpen ||
        !maxRegistrations ||
        !registrationDeadline ||
        !registrationMessage
      ) {
        throw new Error("Form elements not found");
      }

      // Validate form data
      if (isRegistrationOpen.checked && !registrationDeadline.value) {
        alert(
          "Please provide a registration deadline when registration is open"
        );
        return;
      }

      if (isRegistrationOpen.checked && parseInt(maxRegistrations.value) <= 0) {
        alert(
          "Maximum registrations must be greater than 0 when registration is open"
        );
        return;
      }

      // Convert the datetime-local value to UTC ISO string
      const deadlineValue =
        isRegistrationOpen.checked && registrationDeadline.value
          ? new Date(registrationDeadline.value).toISOString()
          : null;

      const formData = {
        id: settingsId,
        is_registration_open: isRegistrationOpen.checked,
        max_registrations: parseInt(maxRegistrations.value),
        registration_deadline: deadlineValue,
        registration_message: registrationMessage.value,
      };

      try {
        const response = await fetch("/api/settings", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(formData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "Failed to save settings");
        }

        alert("Settings saved successfully!");
      } catch (error) {
        console.error("Error saving settings:", error);
        alert(
          error instanceof Error
            ? error.message
            : "Failed to save settings. Please try again."
        );
      }
    });
  </script>
</AdminLayout>
