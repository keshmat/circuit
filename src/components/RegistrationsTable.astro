---
import { createClient } from "@supabase/supabase-js";

if (!import.meta.env.PUBLIC_SUPABASE_URL) {
  throw new Error("Missing env.PUBLIC_SUPABASE_URL");
}

if (!import.meta.env.PUBLIC_SUPABASE_ANON_KEY) {
  throw new Error("Missing env.PUBLIC_SUPABASE_ANON_KEY");
}

// Get the access token from cookies
const accessToken = Astro.cookies.get("sb-access-token")?.value;
console.log("All cookies:", Astro.cookies);
console.log("Access token from cookies:", accessToken);

// Initialize Supabase client with user's access token if available
const supabase = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
  accessToken
    ? {
        global: {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        },
      }
    : undefined
);

interface Registration {
  id: string;
  first_name: string;
  last_name: string;
  email: string;
  phone: string;
  fide_id: string | null;
  birthday: string | null;
  status: string;
  payment_receipt_url: string | null;
  created_at: string;
}

// Only fetch registrations if we have an access token
let registrations: Registration[] | null = null;
let error = null;

if (accessToken) {
  const result = await supabase
    .from("registrations")
    .select("*")
    .order("created_at", { ascending: false });

  registrations = result.data;
  error = result.error;
}
---

<div class="card bg-base-200">
  <div class="card-body">
    {
      !accessToken ? (
        <div class="text-center">
          <p class="text-error">Please log in to view registrations</p>
        </div>
      ) : error ? (
        <div class="text-center">
          <p class="text-error">Error loading registrations</p>
        </div>
      ) : (
        <div class="overflow-x-auto">
          <table class="table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>FIDE ID</th>
                <th>Birthday</th>
                <th>Status</th>
                <th>Receipt</th>
                <th>Registered</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {registrations?.map((registration: Registration) => (
                <tr>
                  <td>
                    {registration.first_name} {registration.last_name}
                  </td>
                  <td>{registration.email}</td>
                  <td>{registration.phone}</td>
                  <td>{registration.fide_id || "-"}</td>
                  <td>{registration.birthday || "-"}</td>
                  <td>
                    <select
                      class="select select-bordered select-sm"
                      data-id={registration.id}
                      data-status={registration.status}
                    >
                      <option
                        value="pending"
                        selected={registration.status === "pending"}
                      >
                        Pending
                      </option>
                      <option
                        value="confirmed"
                        selected={registration.status === "confirmed"}
                      >
                        Confirmed
                      </option>
                      <option
                        value="waitlisted"
                        selected={registration.status === "waitlisted"}
                      >
                        Waitlisted
                      </option>
                    </select>
                  </td>
                  <td>
                    {registration.payment_receipt_url ? (
                      <a
                        href={
                          supabase.storage
                            .from("receipts")
                            .getPublicUrl(registration.payment_receipt_url).data
                            .publicUrl
                        }
                        target="_blank"
                        class="btn btn-sm btn-ghost"
                      >
                        View
                      </a>
                    ) : (
                      "-"
                    )}
                  </td>
                  <td>
                    {new Date(registration.created_at).toLocaleDateString()}
                  </td>
                  <td>
                    <button
                      class="btn btn-sm btn-error"
                      data-id={registration.id}
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )
    }
  </div>
</div>

<script>
  import { createClient } from "@supabase/supabase-js";

  const supabase = createClient(
    import.meta.env.PUBLIC_SUPABASE_URL,
    import.meta.env.PUBLIC_SUPABASE_ANON_KEY,
    {
      auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
      },
    }
  );

  // Handle status updates
  document.querySelectorAll("select[data-status]").forEach((select) => {
    select.addEventListener("change", async (e) => {
      const target = e.target as HTMLSelectElement;
      const id = target.dataset.id;
      const newStatus = target.value;

      try {
        const { error } = await supabase
          .from("registrations")
          .update({ status: newStatus })
          .eq("id", id);

        if (error) throw error;

        // Show success notification
        const notification = document.createElement("div");
        notification.className = "toast toast-top toast-end";
        notification.innerHTML = `
          <div class="alert alert-success">
            <span>Status updated successfully</span>
          </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
      } catch (error) {
        console.error("Error updating status:", error);
        // Show error notification
        const notification = document.createElement("div");
        notification.className = "toast toast-top toast-end";
        notification.innerHTML = `
          <div class="alert alert-error">
            <span>Error updating status</span>
          </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
      }
    });
  });

  // Handle deletions
  document.querySelectorAll("button[data-id]").forEach((button) => {
    button.addEventListener("click", async (e) => {
      const target = e.target as HTMLButtonElement;
      const id = target.dataset.id;

      if (!confirm("Are you sure you want to delete this registration?")) {
        return;
      }

      try {
        const { error } = await supabase
          .from("registrations")
          .delete()
          .eq("id", id);

        if (error) throw error;

        // Remove the row from the table
        target.closest("tr")?.remove();

        // Show success notification
        const notification = document.createElement("div");
        notification.className = "toast toast-top toast-end";
        notification.innerHTML = `
          <div class="alert alert-success">
            <span>Registration deleted successfully</span>
          </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
      } catch (error) {
        console.error("Error deleting registration:", error);
        // Show error notification
        const notification = document.createElement("div");
        notification.className = "toast toast-top toast-end";
        notification.innerHTML = `
          <div class="alert alert-error">
            <span>Error deleting registration</span>
          </div>
        `;
        document.body.appendChild(notification);
        setTimeout(() => notification.remove(), 3000);
      }
    });
  });

  // Handle CSV export
  document.getElementById("export-csv")?.addEventListener("click", () => {
    const registrations = Array.from(document.querySelectorAll("tbody tr")).map(
      (row) => {
        const cells = row.querySelectorAll("td");
        return {
          name: cells[0].textContent,
          email: cells[1].textContent,
          phone: cells[2].textContent,
          fideId: cells[3].textContent,
          birthday: cells[4].textContent,
          status: (cells[5].querySelector("select") as HTMLSelectElement).value,
          registered: cells[7].textContent,
        };
      }
    );

    const csv = [
      ["Name", "Email", "Phone", "FIDE ID", "Birthday", "Status", "Registered"],
      ...registrations.map((r) => [
        r.name,
        r.email,
        r.phone,
        r.fideId,
        r.birthday,
        r.status,
        r.registered,
      ]),
    ]
      .map((row) => row.join(","))
      .join("\n");

    const blob = new Blob([csv], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `registrations-${new Date().toISOString().split("T")[0]}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  });
</script>
